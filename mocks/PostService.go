// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	post "simple-social-media-API/features/post"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newPost, postPhoto
func (_m *PostService) Add(token interface{}, newPost post.Core, postPhoto *multipart.FileHeader) (post.Core, error) {
	ret := _m.Called(token, newPost, postPhoto)

	var r0 post.Core
	if rf, ok := ret.Get(0).(func(interface{}, post.Core, *multipart.FileHeader) post.Core); ok {
		r0 = rf(token, newPost, postPhoto)
	} else {
		r0 = ret.Get(0).(post.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, post.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, newPost, postPhoto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllPosts provides a mock function with given fields:
func (_m *PostService) AllPosts() ([]post.MyPostsResp, error) {
	ret := _m.Called()

	var r0 []post.MyPostsResp
	if rf, ok := ret.Get(0).(func() []post.MyPostsResp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.MyPostsResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, postID
func (_m *PostService) Delete(token interface{}, postID uint) error {
	ret := _m.Called(token, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPostById provides a mock function with given fields: token, postID
func (_m *PostService) GetPostById(token interface{}, postID uint) (post.MyPostsResp, error) {
	ret := _m.Called(token, postID)

	var r0 post.MyPostsResp
	if rf, ok := ret.Get(0).(func(interface{}, uint) post.MyPostsResp); ok {
		r0 = rf(token, postID)
	} else {
		r0 = ret.Get(0).(post.MyPostsResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyPosts provides a mock function with given fields: token
func (_m *PostService) MyPosts(token interface{}) ([]post.MyPostsResp, error) {
	ret := _m.Called(token)

	var r0 []post.MyPostsResp
	if rf, ok := ret.Get(0).(func(interface{}) []post.MyPostsResp); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.MyPostsResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, postID, updatedPost, updatePhoto
func (_m *PostService) Update(token interface{}, postID uint, updatedPost post.Core, updatePhoto *multipart.FileHeader) (post.Core, error) {
	ret := _m.Called(token, postID, updatedPost, updatePhoto)

	var r0 post.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, post.Core, *multipart.FileHeader) post.Core); ok {
		r0 = rf(token, postID, updatedPost, updatePhoto)
	} else {
		r0 = ret.Get(0).(post.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, post.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, postID, updatedPost, updatePhoto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostService(t mockConstructorTestingTNewPostService) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
