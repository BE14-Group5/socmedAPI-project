// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	comment "simple-social-media-API/features/comment"

	mock "github.com/stretchr/testify/mock"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newComment
func (_m *CommentService) Add(token interface{}, newComment comment.Core) (comment.Core, error) {
	ret := _m.Called(token, newComment)

	var r0 comment.Core
	if rf, ok := ret.Get(0).(func(interface{}, comment.Core) comment.Core); ok {
		r0 = rf(token, newComment)
	} else {
		r0 = ret.Get(0).(comment.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, comment.Core) error); ok {
		r1 = rf(token, newComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, postId, commentId
func (_m *CommentService) Delete(token interface{}, postId uint, commentId uint) error {
	ret := _m.Called(token, postId, commentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, uint) error); ok {
		r0 = rf(token, postId, commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: postId
func (_m *CommentService) GetComments(postId uint) ([]comment.Core, error) {
	ret := _m.Called(postId)

	var r0 []comment.Core
	if rf, ok := ret.Get(0).(func(uint) []comment.Core); ok {
		r0 = rf(postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, updComment, postId, commentId
func (_m *CommentService) Update(token interface{}, updComment comment.Core, postId uint, commentId uint) (comment.Core, error) {
	ret := _m.Called(token, updComment, postId, commentId)

	var r0 comment.Core
	if rf, ok := ret.Get(0).(func(interface{}, comment.Core, uint, uint) comment.Core); ok {
		r0 = rf(token, updComment, postId, commentId)
	} else {
		r0 = ret.Get(0).(comment.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, comment.Core, uint, uint) error); ok {
		r1 = rf(token, updComment, postId, commentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentService(t mockConstructorTestingTNewCommentService) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
